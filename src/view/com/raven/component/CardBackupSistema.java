package view.com.raven.component;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.File;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import javax.swing.JOptionPane;

public class CardBackupSistema extends javax.swing.JPanel {

    public CardBackupSistema() {
        initComponents();
    }

    String location = null;
    String filename;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @Override
    protected void paintChildren(Graphics grphcs) {
        Graphics2D g2 = (Graphics2D) grphcs;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        GradientPaint g = new GradientPaint(0, 0, Color.decode("#1CB5E0"), 0, getHeight(), Color.decode("#000046"));
        g2.setPaint(g);
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
        g2.fillRect(getWidth() - 20, 0, getWidth(), getHeight());
        super.paintChildren(grphcs);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new view.com.raven.swing.Table();
        TXT_BACKUP = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DATA"
            }
        ));
        jScrollPane2.setViewportView(table1);

        jButton1.setText("Gerar Backup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(TXT_BACKUP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(483, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TXT_BACKUP, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 333, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Método para criar uma pasta
    public static void criarPasta(String caminho) {
        File pasta = new File(caminho);

        // Verifica se a pasta já existe
        if (!pasta.exists()) {
            boolean criada = pasta.mkdir(); // Cria a pasta
            if (criada) {
//                System.out.println("Pasta criada com sucesso!");
            } else {
//                System.out.println("Falha ao criar a pasta.");
            }
        } else {
//            JOptionPane.showMessageDialog(null, "A pasta já existe.\n");
        }
    }

    // Método para ler o conteúdo da pasta
    public static void lerConteudoPasta(String caminho) {
        File pasta = new File(caminho);

        // Verifica se a pasta existe
        if (pasta.exists() && pasta.isDirectory()) {
            String[] conteudo = pasta.list(); // Lista os arquivos e pastas dentro da pasta
            if (conteudo != null && conteudo.length > 0) {
                System.out.println("Conteúdo da pasta:");
                for (String item : conteudo) {
                    System.out.println(item);
                }
            } else {
//                System.out.println("A pasta está vazia.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "A pasta não existe ou não é um diretório.\n");
        }
    }

    public static void gerarBackup(String filename) {
        // Caminho do mysqldump e outros parâmetros
        String mysqldumpPath = "C:/Program Files/MySQL/MySQL Server 8.0/bin/mysqldump.exe";
        String host = "localhost";
        String user = "root";
        String password = "#Wiccan13#";
        String database = "viver_melhor";
        String port = "3306";

        // Comando completo do mysqldump
        String command = String.format("\"%s\" -v -v -v --host=%s --user=%s --password=%s --port=%s --protocol=tcp --force --allow-keywords --compress --add-drop-table --default-character-set=latin1 --hex-blob --result-file=%s --databases %s",
                mysqldumpPath, host, user, password, port, filename, database);

        ProcessBuilder processBuilder = new ProcessBuilder(command.split(" "));

        // Definir o diretório de trabalho, caso necessário
        processBuilder.directory(new java.io.File("C:/"));

        try {
            // Iniciar o processo
            Process process = processBuilder.start();

            // Captura de erros e saída padrão do processo
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            StringBuilder output = new StringBuilder();
            StringBuilder errors = new StringBuilder();

            // Captura da saída do processo
            while ((line = outputReader.readLine()) != null) {
                output.append(line).append("\n");
            }

            // Captura dos erros do processo
            while ((line = errorReader.readLine()) != null) {
                errors.append(line).append("\n");
            }

            // Aguarda o término do processo
            int processComplete = process.waitFor();

            // Verifica o resultado
            if (processComplete == 0) {
                JOptionPane.showMessageDialog(null, "Backup Gerado com sucesso!\n" + output.toString());
            } else {
                JOptionPane.showMessageDialog(null, "Falha ao gerar Backup!\nErros: " + errors.toString());
            }
        } catch (IOException | InterruptedException e) {
            JOptionPane.showMessageDialog(null, "Erro ao executar o comando: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String caminhoPasta = "C:/Backup"; // Caminho da pasta a ser criada e lida

        // Criar a pasta
        criarPasta(caminhoPasta);

        String filename = "C:/Backup/viver_melhor.sql"; // Defina o caminho do arquivo de backup
        gerarBackup(filename);

        // Ler o conteúdo da pasta
        lerConteudoPasta(caminhoPasta);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TXT_BACKUP;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private view.com.raven.swing.Table table1;
    // End of variables declaration//GEN-END:variables
}
