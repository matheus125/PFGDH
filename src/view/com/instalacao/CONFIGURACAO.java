package view.com.instalacao;

import com.mensagem.Mensagem_Teste_Instalacao;
import com.mensagem.Mensagem_Teste_Instalacao_Erro;
import com.raven.controller.ControllerFuncionario;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.*;
import javax.swing.JOptionPane;
import raven.glasspanepopup.GlassPanePopup;
import view.com.login.TelaLogin;
import com.raven.model.Funcionarios;
import com.raven.model.Usuarios;

/**
 *
 * @author USER
 */
public class CONFIGURACAO extends javax.swing.JFrame {

    private final char senha;

    final private String driver = "com.mysql.cj.jdbc.Driver";
    Connection CONEXAO;
    private boolean VERIFICACAO = false;

    Funcionarios funcionario = new Funcionarios();
    Usuarios usuarios = new Usuarios();
    ControllerFuncionario controllerFuncionarios = new ControllerFuncionario();

    public CONFIGURACAO() {
        initComponents();
        senha = T_Senha.getEchoChar();
        GlassPanePopup.install(this);
        if (VERIFICACAO == false) {
            LE_CONFIGURACAO_GRAVADA();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        T_Host = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        T_Porta = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        T_User = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        T_Senha = new javax.swing.JPasswordField();
        btnTestar = new button.Button();
        btnSalvar = new button.Button();
        btnTestar1 = new button.Button();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setText("LOCALHOST");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(130, 70, 90, 40);

        T_Host.setText("localhost");
        jPanel1.add(T_Host);
        T_Host.setBounds(130, 110, 180, 30);

        jLabel3.setText("PORTA");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(340, 70, 90, 40);

        T_Porta.setText("3306");
        T_Porta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T_PortaActionPerformed(evt);
            }
        });
        jPanel1.add(T_Porta);
        T_Porta.setBounds(340, 110, 180, 30);

        jLabel4.setText("USUÁRIO");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(130, 150, 90, 40);

        T_User.setText("root");
        jPanel1.add(T_User);
        T_User.setBounds(130, 190, 180, 30);

        jLabel5.setText("SENHA");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(340, 150, 90, 40);
        jPanel1.add(T_Senha);
        T_Senha.setBounds(340, 190, 180, 30);

        btnTestar.setBackground(new java.awt.Color(255, 0, 0));
        btnTestar.setForeground(new java.awt.Color(245, 245, 245));
        btnTestar.setText("SAIR");
        btnTestar.setRippleColor(new java.awt.Color(255, 255, 255));
        btnTestar.setShadowColor(new java.awt.Color(253, 83, 83));
        btnTestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestarActionPerformed(evt);
            }
        });
        jPanel1.add(btnTestar);
        btnTestar.setBounds(230, 320, 180, 41);

        btnSalvar.setBackground(new java.awt.Color(30, 180, 114));
        btnSalvar.setForeground(new java.awt.Color(245, 245, 245));
        btnSalvar.setText("SALVAR");
        btnSalvar.setRippleColor(new java.awt.Color(255, 255, 255));
        btnSalvar.setShadowColor(new java.awt.Color(30, 180, 114));
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalvar);
        btnSalvar.setBounds(340, 260, 180, 41);

        btnTestar1.setBackground(new java.awt.Color(29, 162, 253));
        btnTestar1.setForeground(new java.awt.Color(245, 245, 245));
        btnTestar1.setText("TESTAR");
        btnTestar1.setRippleColor(new java.awt.Color(255, 255, 255));
        btnTestar1.setShadowColor(new java.awt.Color(253, 83, 83));
        btnTestar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnTestar1);
        btnTestar1.setBounds(130, 260, 180, 41);

        jCheckBox1.setText("Exibir Senha");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);
        jCheckBox1.setBounds(340, 230, 130, 20);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exibirSenha.png"))); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(530, 190, 37, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(634, 399));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //MENSAGEM PARA PREENCHER O CAMPO LOGIN.
    private void Mensagem_Teste_Conexao() {
        Mensagem_Teste_Instalacao obj = new Mensagem_Teste_Instalacao();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
            }
        });
        GlassPanePopup.showPopup(obj);
    }//FIM.

    //MENSAGEM PARA PREENCHER O CAMPO LOGIN.
    private void Mensagem_Teste_Conexao_Erro() {
        Mensagem_Teste_Instalacao_Erro obj = new Mensagem_Teste_Instalacao_Erro();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
            }
        });
        GlassPanePopup.showPopup(obj);
    }//FIM.

    private void T_PortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T_PortaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T_PortaActionPerformed

    private void btnTestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnTestarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (CONEXAO_SERVIDOR(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText())) {
            if (GRAVA_CONFIGURAÇÃO()) {//SE CONSEGUIR GRAVAR A CONFIGURAÇÃO PASSA PARA O PROXIMO PASSO
                if (LE_CONFIGURACAO_GRAVADA()) {//SE CONSEGUIR LER A GRAVAÇÃO REALIZADA PASSA PARA O PROXIMO PASSO
                    if (CRIA_DATA_BASE_COMPLETO()) {//SE NÃO OCORRER ERRO NAS QUERES SQL PASSA PARA O PROXIMO PASSO
                        saveFuncionarios();
                        FECHAR_CONEXAO();//PASSOU TODOS OS PASSOS AGORA IRÁ FECHAR A TELA E ABRIR OUTRA
                        new TelaLogin().setVisible(true);//CHAMA A TELA PRINCIPAL, OU SE QUISER POSSO CHAMAR A TELA DE LOGIN. FICA A CRITERIO DO PROGRAMADOR
                        dispose();
                    } else {
                        btnSalvar.setEnabled(false);
                    }
                } else {
                    btnSalvar.setEnabled(false);
                }
            } else {
                btnSalvar.setEnabled(false);
            }
        } else {
            btnSalvar.setEnabled(false);
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnTestar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestar1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTestar1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            T_Senha.setEchoChar('\u0000');
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exibirSenha.png")));
            jCheckBox1.setText("Ocultar senha");
        } else {
            T_Senha.setEchoChar(senha);
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ocultarSenha.png")));
            jCheckBox1.setText("Exibir senha");
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CONFIGURACAO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CONFIGURACAO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CONFIGURACAO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CONFIGURACAO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //CHAMADA A TELA PRINCIPAL OU DE LOGIN
        CONFIGURACAO TELA = new CONFIGURACAO();

        if (TELA.LE_CONFIGURACAO_GRAVADA()) {
            if (TELA.CRIA_DATA_BASE_COMPLETO()) {
                TELA.VERIFICACAO = true;
                TELA.FECHAR_CONEXAO();
                new TelaLogin().setVisible(true);
            }
        }
        if (TELA.VERIFICACAO == false) {

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new CONFIGURACAO().setVisible(true);
                }
            });
        }
        //FIM.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField T_Host;
    private javax.swing.JTextField T_Porta;
    private javax.swing.JPasswordField T_Senha;
    private javax.swing.JTextField T_User;
    private button.Button btnSalvar;
    private button.Button btnTestar;
    private button.Button btnTestar1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    //METODO PARA LE A CONFIGURAÇÃO GRAVADA
    private boolean LE_CONFIGURACAO_GRAVADA() {
        boolean leitura = false;

        try {
            String linha;
            String ArquivoConfiguracao = "C:/ConexaoBanco/Configuracao/conexao.ini";
            int cont = 0;
            File arq = new File(ArquivoConfiguracao);
            if (arq.exists()) {

                FileReader reader = new FileReader(ArquivoConfiguracao);
                BufferedReader leitor = new BufferedReader(reader);

                while (true) {
                    linha = leitor.readLine();
                    if (cont == 0) {
                        T_Host.setText(linha);
                    }
                    if (cont == 1) {
                        T_Porta.setText(linha);
                    }
                    if (cont == 2) {
                        T_User.setText(linha);
                    }
                    if (cont >= 3) {
                        T_Senha.setText(linha);
                        break;
                    }
                    System.out.println(linha + "\n");
                    cont++;
                }
            }
            if (arq.exists()) {
                if (CONEXAO_SERVIDOR(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText())) {
                    leitura = true;
                }
            }
        } catch (Exception erro) {
        }
        return leitura;
    }
    //FIM.

    //METODO PARA CRIAR O DIRETORIO DE CONFIGURAÇÃO
    private boolean GRAVA_CONFIGURAÇÃO() {
        boolean grava = false;

        try {
            File diretorio = new File("C:/ConexaoBanco/Configuracao");
            if (!diretorio.exists()) {
                diretorio.mkdirs();
            }
            FileWriter arql = new FileWriter("C:/ConexaoBanco/Configuracao/conexao.ini");
            PrintWriter gravarArq = new PrintWriter(arql);
            gravarArq.println(T_Host.getText());
            gravarArq.println(T_Porta.getText());
            gravarArq.println(T_User.getText());
            gravarArq.println(T_Senha.getText());
            arql.close();
            grava = true;
        } catch (IOException erro) {
            JOptionPane.showMessageDialog(null, "Você não tem permissão de administrador para configurar o "
                    + "sistema.", "ERRO!", 0);
        }

        return grava;
    }
    //FIM.

    //METODO DE CONEXÃO COM O SERVIDOR
    private boolean CONEXAO_SERVIDOR(String Servidor, String Porta, String usuario, String Senha) {
        boolean com = false;
        String SERVIDOR = Servidor;
        String PORTA_CONEXAO = Porta;
        String USUARIO = usuario;
        String SENHA = Senha;

        try {
            Class.forName(driver);
            CONEXAO = DriverManager.getConnection("jdbc:mysql://" + SERVIDOR + ":"
                    + PORTA_CONEXAO + "", USUARIO, SENHA);
            com = true;
        } catch (ClassNotFoundException Fonte) {
            JOptionPane.showMessageDialog(null, "Driver não localizado");
        } catch (SQLException Fonte) {
        }

        return com;
    }
    //FIM.

    //METODO DE CONEXÃO COM O BANCO DE DADOS
    private boolean CONEXAO_DATABASE(String Servidor, String Porta, String usuario, String Senha) {
        boolean com = false;
        String SERVIDOR = Servidor;
        String PORTA_CONEXAO = Porta;
        String USUARIO = usuario;
        String SENHA = Senha;

        try {
            Class.forName(driver);
            CONEXAO = DriverManager.getConnection("jdbc:mysql://" + SERVIDOR + ":"
                    + PORTA_CONEXAO + "/TESTE_DEV", USUARIO, SENHA);
            com = true;
        } catch (ClassNotFoundException Fonte) {
            JOptionPane.showMessageDialog(null, "Driver não localizado");
        } catch (SQLException Fonte) {
        }
        return com;
    }
    //FIM.

    //METODO PARA FECHAR CONEXÃO COM O BANCO DE DADOS
    private void FECHAR_CONEXAO() {
        try {
            CONEXAO.close();
        } catch (SQLException fech) {
            JOptionPane.showMessageDialog(null, "Erro ao fechar conexão com o banco de dados" + fech);
        }
    }
    //FIM.

    //METODO DE VERIFICAÇÃO DO DATABASE
    private boolean CRIA_DATA_BASE_COMPLETO() {
        boolean sucesso = true;
        if (CRIA_BANCO() == false) {
            sucesso = false;
        } else if (CRIA_TABELAS() == false) {
            sucesso = false;
        } else if (CRIA_PROCEDURES() == false) {
            sucesso = false;
        }
        return sucesso;
    }
    //FIM.

    //METODO DE CRIAÇÃO DO DATABASE
    private boolean CRIA_BANCO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE DATABASE IF NOT EXISTS dev05";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        FECHAR_CONEXAO();
        return sucesso;
    }
    //FIM.

    //METODO DE CHAMADA DE CRIAÇÃO DE TABELAS
    private boolean CRIA_TABELAS() {
        boolean sucesso = true;

        CONEXAO_DATABASE(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText());
        if (CRIA_TABELA_ENDERECO() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_TITULAR() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_DEPENDENTES() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_SOCIO_ECONOMICO() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_SOCIO_ECONOMICO_SAUDE() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_REFEICOES_VENDIDAS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_FUNCIONARIO() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_USER() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_USER_LOGS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_RELATORIOS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_RESUMODIA() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_SENHAS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_FAMILIA() == false) {
            sucesso = false;
        }
        FECHAR_CONEXAO();
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_ENDERECO
    private boolean CRIA_TABELA_ENDERECO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_endereco ("
                + " id INT NOT NULL AUTO_INCREMENT , "
                + " cep VARCHAR (20) NULL ,"
                + " bairro VARCHAR (50) NULL ,"
                + " rua VARCHAR (100) NULL ,"
                + " numero VARCHAR (20) NULL ,"
                + " referencia VARCHAR (100) NULL ,"
                + " nacionalidade VARCHAR (50) NULL ,"
                + " naturalidade VARCHAR (50) NULL ,"
                + " cidade VARCHAR (50) NULL ,"
                + " tempoDeMoradia_cliente VARCHAR (30) NULL ,"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + " PRIMARY KEY (id) "
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_TITULAR
    private boolean CRIA_TABELA_TITULAR() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_titular ("
                + "id int primary key not null auto_increment,"
                + "id_endereco int,"
                + "nome_Completo VARCHAR(100) NULL,"
                + "nome_Social VARCHAR(100) NULL,"
                + "cor_cliente VARCHAR(100) NULL,"
                + "nome_Mae VARCHAR(100) NULL,"
                + "telefone VARCHAR(20) NULL,"
                + "data_Nascimento VARCHAR(20) NULL,"
                + "idade_cliente int NULL,"
                + "genero_cliente VARCHAR(30) NULL,"
                + "estado_Civil VARCHAR(50) NULL,"
                + "rg VARCHAR(20) NULL,"
                + "cpf VARCHAR(20) NULL,"
                + "nis VARCHAR(30) NULL,"
                + "status_Cliente varchar (8) not null,"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + "FOREIGN KEY (id_endereco) REFERENCES tb_endereco (id)"
                + ")ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_DEPENDENTES
    private boolean CRIA_TABELA_DEPENDENTES() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_dependentes ("
                + "id int primary key not null auto_increment,"
                + "id_titular int,"
                + "nome_dependente varchar (100) null,"
                + "rg varchar (10) null,"
                + "cpf varchar (15) null,"
                + "Idade int null,"
                + "genero varchar (10) null,"
                + "dependencia_cliente varchar (50) null,"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + "FOREIGN KEY (id_titular) REFERENCES tb_titular (id)"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_SOCIO_ECONOMICO
    private boolean CRIA_TABELA_SOCIO_ECONOMICO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_socio_economico ("
                + "id int primary key not null auto_increment,"
                + "id_titular int,"
                + "escolariedade varchar(50) DEFAULT NULL,"
                + "renda_mensal_familia varchar(50) DEFAULT NULL,"
                + "programas_sociais varchar(50) DEFAULT NULL,"
                + "composicao_familiar varchar(50) DEFAULT NULL,"
                + "moradia varchar(50) DEFAULT NULL,"
                + "estrutura_Moradia varchar(50) DEFAULT NULL,"
                + "qtdPessoas_Trabalhando int DEFAULT NULL,"
                + "emprego varchar(50) DEFAULT NULL,"
                + "profissao_Responsavel varchar(50) DEFAULT NULL,"
                + "AB_Agua varchar(3) DEFAULT NULL,"
                + "SN_basico varchar(3) DEFAULT NULL,"
                + "Energia_eletrica varchar(3) DEFAULT NULL,"
                + "Lixo_Domiciliar varchar(15) DEFAULT NULL,"
                + "frequenta_Centro varchar(5) DEFAULT NULL,"
                + "registration_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + "FOREIGN KEY (id_titular) REFERENCES tb_titular (id)"
                + ")ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_SOCIO_ECONOMICO_SAUDE
    private boolean CRIA_TABELA_SOCIO_ECONOMICO_SAUDE() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_socio_economico_saude ("
                + "id int primary key not null auto_increment,"
                + "id_titular int,"
                + "doenca varchar (100) null,"
                + "outras_Doencas varchar (100) null,"
                + "deficiencia varchar (3) null,"
                + "justificativa_Deficiencia varchar (100) null,"
                + "laudo varchar (100) null,"
                + "observacao varchar (100) null,"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + "FOREIGN KEY (id_titular) REFERENCES tb_titular (id)"
                + ")ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_REFEICOES_VENDIDAS
    private boolean CRIA_TABELA_REFEICOES_VENDIDAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_refeicoes_vendidas ("
                + "id int primary key auto_increment not null,"
                + "total_servido int not null,"
                + "data varchar (20),"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_FUNCIONARIO
    private boolean CRIA_TABELA_FUNCIONARIO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_funcionario ("
                + "id int primary key auto_increment not null,"
                + "nome varchar (100) not null,"
                + "funcao varchar (50) not null,"
                + "telefone varchar (15) null,"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_USER
    private boolean CRIA_TABELA_USER() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_user ("
                + "id int primary key auto_increment not null,"
                + "id_funcionario int,"
                + "login varchar (15) not null,"
                + "password varchar (100) not null,"
                + "perfil varchar (50) not null,"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + "FOREIGN KEY (id_funcionario) REFERENCES tb_funcionario (id)"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_USER_LOGS
    private boolean CRIA_TABELA_USER_LOGS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_userlogs ("
                + "id int primary key auto_increment not null,"
                + "id_user int,"
                + "login varchar (15),"
                + "nome varchar (100),"
                + "registration_date timestamp  NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL,"
                + "FOREIGN KEY (id_user) REFERENCES tb_user (id)"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_RELATORIOS
    private boolean CRIA_TABELA_RELATORIOS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_relatorios ("
                + "Idade_0a16Masculino int NOT NULL,"
                + "Idade_0a16Feminino int NOT NULL,"
                + "Idade_16a60Masculino int NOT NULL,"
                + "Idade_16a60Feminino int NOT NULL,"
                + "Idade_60Masculino int NOT NULL,"
                + "Idade_60Feminino int NOT NULL,"
                + "Deficientes int NOT NULL,"
                + "senhas_genericas int NOT NULL,"
                + "Total_pessoas_atendidas int NOT NULL,"
                + "data varchar(20) PRIMARY KEY NOT NULL"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_RESUMODIA
    private boolean CRIA_TABELA_RESUMODIA() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_resumodia ("
                + "id int primary key auto_increment not null"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_SENHAS
    private boolean CRIA_TABELA_SENHAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_senhas ("
                + "id int primary key auto_increment not null,"
                + "cliente varchar(100) DEFAULT NULL,"
                + "Idade varchar(20) DEFAULT NULL,"
                + "Genero varchar(45) DEFAULT NULL,"
                + "Deficiente varchar(45) DEFAULT NULL,"
                + "tipoSenha varchar(10) DEFAULT NULL,"
                + "data_refeicao varchar(10) DEFAULT NULL,"
                + "registration_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,"
                + "registration_date_update timestamp NULL DEFAULT NULL"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODOS DE CRIAÇÃO DE TABELA_FAMILIA
    private boolean CRIA_TABELA_FAMILIA() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS tb_familia ("
                + "id_familia int primary key auto_increment not null,"
                + "id_titular int,"
                + "id_dependente int,"
                + "FOREIGN KEY (id_titular) REFERENCES tb_titular (id),"
                + "FOREIGN KEY (id_dependente) REFERENCES tb_dependentes (id)"
                + ") ENGINE = InnoDB";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
    //FIM.

    //METODO DE CHAMADA DE CRIAÇÃO DE PROCEDURES
//    @SuppressWarnings("empty-statement")
    @SuppressWarnings("empty-statement")
    private boolean CRIA_PROCEDURES() {
        boolean sucesso = true;

        CONEXAO_DATABASE(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText());
        if (CRIA_PROCIDURE_DELETE_FUNCIONARIO() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_LIMPAR_RELATORIOS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_LIMPAR_RESUMO_DIA() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_LIMPAR_SENHAS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_LISTAR_DEPENDENTES() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_PESQUISAR_TITULAR() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_PESQUISAR_FUNCIONARIO() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_DEPENDENTES() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_FUNCIONARIOS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_REFEICOES_VENDIDAS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_SENHAS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_SENHAS_GENERICAS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_SOCIO_ECONOMICO() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_SOCIO_ECONOMICO_SAUDE() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_SALVAR_TITULAR() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_UPDATE_DEPENDENTE() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_UPDATE_FUNCIONARIOS() == false) {
            sucesso = false;
        } else if (CRIA_PROCIDURE_UPDATE_TITULAR() == false) {
            sucesso = false;
        };
        FECHAR_CONEXAO();
        return sucesso;
    }
    //FIM.

    //METODO DE CRIAÇÃO DE PROCEDURES_DELETE_FUNCIONARIOS
    private boolean CRIA_PROCIDURE_DELETE_FUNCIONARIO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_delete_funcionario ("
                + "  IN pid_funcionario int "
                + " )"
                + " BEGIN"
                + " DECLARE vid_funcionario INT;"
                + " SET FOREIGN_KEY_CHECKS = 0;"
                + " SELECT id INTO vid_funcionario FROM tb_funcionario WHERE id = pid_funcionario;"
                + " DELETE FROM tb_funcionario WHERE id = pid_funcionario;"
                + " DELETE FROM tb_user WHERE id_funcionario = pid_funcionario;"
                + " SET FOREIGN_KEY_CHECKS = 1;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCEDURES_LIMPAR_RELATORIOS
    private boolean CRIA_PROCIDURE_LIMPAR_RELATORIOS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_limpar_relatorios ("
                + " )"
                + " BEGIN"
                + " truncate tb_relatorios;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_LIMPAR_RESUMO_DIA
    private boolean CRIA_PROCIDURE_LIMPAR_RESUMO_DIA() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_limpar_resumo_dia ("
                + " )"
                + " BEGIN"
                + " truncate tb_resumodia;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_LIMPAR_SENHAS
    private boolean CRIA_PROCIDURE_LIMPAR_SENHAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_limpar_senhas ("
                + " )"
                + " BEGIN"
                + " truncate tb_senhas;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_LISTAR_DEPENDENTES
    private boolean CRIA_PROCIDURE_LISTAR_DEPENDENTES() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_listar_dependentes ("
                + " )"
                + " BEGIN"
                + " SELECT d.id, d.nome_dependente, d.rg, d.cpf, d.Idade, d.genero, d.dependencia_cliente, d.registration_date FROM tb_titular t INNER JOIN tb_dependentes d on d.id_titular = t.id;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_PESQUISAR_TITULAR
    private boolean CRIA_PROCIDURE_PESQUISAR_TITULAR() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_pesquisarTitular ("
                + "p_nome varchar (100)"
                + " )"
                + " BEGIN"
                + " select * from tb_titular t INNER JOIN tb_endereco e on e.id = t.id_endereco WHERE nome_Completo like p_nome or cpf like p_nome;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_PESQUISAR_FUNCIONARIO
    private boolean CRIA_PROCIDURE_PESQUISAR_FUNCIONARIO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_pesquisar_funcionarios ("
                + "p_nome varchar (100)"
                + " )"
                + " BEGIN"
                + " SELECT * FROM tb_user u INNER JOIN tb_funcionario f on u.id_funcionario = f.id WHERE nome like p_nome ;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_DEPENDENTES
    private boolean CRIA_PROCIDURE_SALVAR_DEPENDENTES() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_dependentes ("
                + "pidtitular int,"
                + "pnome_dependente varchar (100),"
                + "prg varchar (10),"
                + "pcpf varchar (15),"
                + "pIdade int,"
                + "pgenero varchar (10),"
                + "pdependencia_cliente varchar (50)"
                + " )"
                + " BEGIN"
                + " DECLARE vid_dependente int;"
                + " INSERT INTO tb_dependentes (id_titular, nome_dependente, rg, cpf, Idade, genero, dependencia_cliente) \n"
                + "    VALUES (pidtitular, pnome_dependente, prg, pcpf, pIdade, pgenero, pdependencia_cliente);\n"
                + "    SET vid_dependente = last_insert_id();\n"
                + "    \n"
                + "    INSERT INTO tb_familia (id_titular, id_dependente) values (pidtitular,vid_dependente);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_FUNCIONARIOS
    private boolean CRIA_PROCIDURE_SALVAR_FUNCIONARIOS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_funcionarios ("
                + "pnome varchar (100),"
                + "pfuncao varchar (100),"
                + "ptelefone varchar (15),"
                + "plogin varchar (100),"
                + "ppassword varchar (250),"
                + "pperfil varchar (50)"
                + " )"
                + " BEGIN"
                + " DECLARE vidfuncionario INT;"
                + " INSERT INTO tb_funcionario (nome, funcao, telefone) VALUES (pnome, pfuncao, ptelefone);\n"
                + "	\n"
                + "    SET vidfuncionario = last_insert_id();\n"
                + "    \n"
                + "    INSERT INTO tb_user (id_funcionario, login, password, perfil) \n"
                + "    VALUES (vidfuncionario, plogin, ppassword, pperfil);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_REFEICOES_VENDIDAS
    private boolean CRIA_PROCIDURE_SALVAR_REFEICOES_VENDIDAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_refeicoes_vendidas ("
                + "ptotal_servido int,"
                + "pdata varchar (20)"
                + " )"
                + " BEGIN"
                + " INSERT INTO tb_refeicoes_vendidas (total_servido, data) VALUES (ptotal_servido, pdata);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_SENHAS
    private boolean CRIA_PROCIDURE_SALVAR_SENHAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_senhas ("
                + "pCliente varchar (100),"
                + "pGenero varchar (45),"
                + "pIdade varchar (45),"
                + "pDeficiente varchar (45),"
                + "pdata_refeicao varchar (10)"
                + " )"
                + " BEGIN"
                + " INSERT INTO tb_senhas (cliente, Genero, Idade, Deficiente, tipoSenha, data_refeicao) \n"
                + "    VALUES (pCliente, pGenero, pIdade, pDeficiente,\"NORMAL\", pdata_refeicao);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_SENHAS_GENERICAS
    private boolean CRIA_PROCIDURE_SALVAR_SENHAS_GENERICAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_senhas_genericas ("
                + "pdata_refeicao varchar (10)"
                + " )"
                + " BEGIN"
                + " INSERT INTO tb_senhas (Idade, Genero, tipoSenha, data_refeicao) \n"
                + "    VALUES (1,1,\"GENÉRICO\", pdata_refeicao);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_SOCIO_ECONOMICO
    private boolean CRIA_PROCIDURE_SALVAR_SOCIO_ECONOMICO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_socio_economico ("
                + "pidtitular int,"
                + "pescolariedade varchar(50), "
                + "prenda_mensal_familia varchar(50), "
                + "pprogramas_sociais varchar(50),"
                + "pcomposicao_familiar varchar(50),"
                + "pmoradia varchar(50),"
                + "pestrutura_Moradia varchar(50), "
                + "pqtdPessoas_Trabalhando int,"
                + "pemprego varchar(50),"
                + "pprofissao_Responsavel varchar(50), "
                + "pAB_Agua varchar(3),"
                + "pSN_basico varchar(3), "
                + "pEnergia_eletrica varchar(3), "
                + "pLixo_Domiciliar varchar(15),"
                + "pfrequenta_Centro varchar(5)"
                + " )"
                + " BEGIN"
                + " 	INSERT INTO tb_socio_economico (id_titular, escolariedade, renda_mensal_familia, programas_sociais,\n"
                + "    composicao_familiar, moradia, estrutura_Moradia, qtdPessoas_Trabalhando, emprego, profissao_Responsavel,\n"
                + "    AB_Agua, SN_basico, Energia_eletrica, Lixo_Domiciliar, frequenta_Centro) \n"
                + "    VALUES (pidtitular, pescolariedade, prenda_mensal_familia, pprogramas_sociais, pcomposicao_familiar,\n"
                + "    pmoradia, pestrutura_Moradia, pqtdPessoas_Trabalhando, pemprego, pprofissao_Responsavel, pAB_Agua,\n"
                + "    pSN_basico, pEnergia_eletrica, pLixo_Domiciliar, pfrequenta_Centro);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_SOCIO_ECONOMICO_SAUDE
    private boolean CRIA_PROCIDURE_SALVAR_SOCIO_ECONOMICO_SAUDE() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_socio_economico_saude ("
                + "pidtitular int,"
                + "pdoenca varchar(100), "
                + "poutras_Doencas varchar(100), "
                + "pdeficiencia varchar(3), "
                + "pjustificativa_Deficiencia varchar(100), "
                + "plaudo varchar(100), "
                + "pobservacao varchar(100)"
                + " )"
                + " BEGIN"
                + " 	INSERT INTO tb_socio_economico_saude (id_titular, doenca, outras_Doencas, deficiencia,\n"
                + "    justificativa_Deficiencia, laudo, observacao) \n"
                + "    VALUES (pidtitular, pdoenca, poutras_Doencas, pdeficiencia, pjustificativa_Deficiencia,\n"
                + "    plaudo, pobservacao);"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_SALVAR_TITULAR
    private boolean CRIA_PROCIDURE_SALVAR_TITULAR() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_salvar_titular ("
                + "pnome_Completo varchar(100),"
                + "pnome_Social varchar(100), "
                + " pcor_cliente varchar(100), "
                + "pnome_Mae varchar(100), "
                + "ptelefone varchar(20), "
                + "pdata_Nascimento varchar(20), "
                + "pidade_cliente int (12), "
                + "pgenero_cliente varchar(30), "
                + "pestado_Civil varchar(50), "
                + "prg varchar(20), "
                + "pcpf varchar(20), "
                + "pnis varchar(30), "
                + "pstatus_Cliente varchar(8),"
                + "pcep varchar(20),"
                + "pbairro varchar(50), "
                + "prua varchar(100), "
                + "pnumero varchar(20), "
                + "preferencia varchar(100), "
                + "pnacionalidade varchar(50), "
                + "pnaturalidade varchar(50),"
                + "pcidade varchar(50),"
                + "ptempoDeMoradia_cliente varchar(30)"
                + " )"
                + " BEGIN"
                + " 	DECLARE videndereco, vidtitular int;\n"
                + "    \n"
                + "    INSERT INTO tb_endereco (cep, bairro, rua, numero, referencia, nacionalidade, naturalidade, cidade, tempoDeMoradia_cliente) \n"
                + "    VALUES (pcep, pbairro, prua, pnumero, preferencia, pnacionalidade, pnaturalidade, pcidade, ptempoDeMoradia_cliente);\n"
                + "    SET videndereco = last_insert_id();\n"
                + "    \n"
                + "    INSERT INTO tb_titular (id_endereco, nome_Completo, nome_Social, cor_cliente, nome_Mae, telefone, data_Nascimento, \n"
                + "    idade_cliente, genero_cliente, estado_Civil, rg, cpf, nis, status_Cliente) \n"
                + "    VALUES (videndereco, pnome_Completo, pnome_Social, pcor_cliente, pnome_Mae, ptelefone, pdata_Nascimento, \n"
                + "    pidade_cliente, pgenero_cliente, pestado_Civil, prg, pcpf, pnis, pstatus_Cliente); "
                + "END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_UPDATE_DEPENDENTE
    private boolean CRIA_PROCIDURE_UPDATE_DEPENDENTE() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_update_dependente ("
                + "IN pid int,"
                + " IN pid_titular int, "
                + "  IN pnome_dependente varchar(100), "
                + " IN prg varchar(10), "
                + "IN pcpf varchar(15), "
                + "IN pIdade int, "
                + "IN pgenero varchar(10), "
                + "IN pdependencia_cliente varchar(50)"
                + " )"
                + " BEGIN"
                + " 	UPDATE tb_dependentes set id_titular = pid_titular, nome_dependente = pnome_dependente, rg = prg, cpf = pcpf, \n"
                + "    Idade = pIdade, genero = pgenero, dependencia_cliente = pdependencia_cliente, registration_date_update = CURRENT_TIMESTAMP\n"
                + "    WHERE id = pid;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_UPDATE_FUNCIONARIOS
    private boolean CRIA_PROCIDURE_UPDATE_FUNCIONARIOS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_update_funcionarios ("
                + "IN pid int,"
                + "IN pnome varchar (100),"
                + "IN pfuncao varchar (100),"
                + "IN ptelefone varchar (15),"
                + "IN plogin varchar (100),"
                + "IN ppassword varchar (250),"
                + "IN pperfil varchar (50)"
                + " )"
                + " BEGIN"
                + " 	UPDATE tb_funcionario set nome = pnome, funcao = pfuncao, telefone = ptelefone, registration_date_update = CURRENT_TIMESTAMP WHERE id = pid;\n"
                + "    UPDATE tb_user set id_funcionario = pid, login = plogin , password = ppassword, perfil = pperfil, registration_date_update = CURRENT_TIMESTAMP  WHERE id = pid;"
                + " END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    //METODO DE CRIAÇÃO DE PROCIDURE_UPDATE_TITULAR
    private boolean CRIA_PROCIDURE_UPDATE_TITULAR() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE PROCEDURE IF NOT EXISTS sp_update_titular ("
                + "IN pid int,"
                + "IN pnome_Completo varchar(100), "
                + "IN pnome_Social varchar(100), "
                + "IN pcor_cliente varchar(100), "
                + "IN pnome_Mae varchar(100), "
                + "IN ptelefone varchar(20), "
                + "IN pdata_Nascimento varchar(20), "
                + "IN pidade_cliente int(12), "
                + "IN pgenero_cliente varchar(30), "
                + "IN pestado_Civil varchar(50), "
                + "IN prg varchar(20), "
                + "IN pcpf varchar(20), "
                + "IN pnis varchar(30), "
                + "IN pstatus_Cliente varchar(8),"
                + "IN pcep varchar(20),"
                + "IN pbairro varchar(50), "
                + "IN prua varchar(100), "
                + "IN pnumero varchar(20), "
                + "IN preferencia varchar(100), "
                + "IN pnacionalidade varchar(50), "
                + "IN pnaturalidade varchar(50),"
                + "IN pcidade varchar(50),"
                + "IN ptempoDeMoradia_cliente varchar(30)"
                + " )"
                + " BEGIN 	UPDATE tb_endereco set cep = pcep, bairro = pbairro, rua = prua, numero = pnumero, \n"
                + "    referencia = preferencia, nacionalidade = pnacionalidade, naturalidade = pnaturalidade, cidade = pcidade,\n"
                + "    tempoDeMoradia_cliente = ptempoDeMoradia_cliente, registration_date_update = CURRENT_TIMESTAMP\n"
                + "    WHERE id = pid;\n"
                + "\n"
                + "	UPDATE tb_titular set id_endereco = pid, nome_Completo = pnome_Completo, nome_Social = pnome_Social,\n"
                + "    cor_cliente = pcor_cliente, nome_Mae = pnome_Mae, telefone = ptelefone, data_Nascimento = pdata_Nascimento,\n"
                + "    idade_cliente = pidade_cliente, genero_cliente = pgenero_cliente, estado_Civil = pestado_Civil,\n"
                + "    rg = prg, cpf = pcpf, nis = pnis ,status_Cliente = pstatus_Cliente, registration_date_update = CURRENT_TIMESTAMP\n"
                + "    WHERE id = pid; END";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }//FIM.

    public void saveFuncionarios() {
        String Nome, Funcao, Telefone, Login, Password, Perfil;

        Nome = "Administrador";
        Funcao = "ASSESSOR";
        Telefone = "(92) 98201-0100";
        Login = "000.000.000-00";
        Password = "123";
        Perfil = "Administrador";

        funcionario.setNome(Nome);
        funcionario.setFuncao(Funcao);
        funcionario.setTelefone(Telefone);
        usuarios.setLogin(Login);
        usuarios.setPassword(Password);
        usuarios.setPerfil(Perfil);
        controllerFuncionarios.controlSaveFuncionarios(funcionario, usuarios);
    }

}
